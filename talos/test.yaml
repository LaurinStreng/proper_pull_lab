apiVersion: v1
automountServiceAccountToken: false
kind: ServiceAccount
metadata:
  labels:
    app: blocky-16.13.6
    app.kubernetes.io/instance: blocky
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: blocky
    app.kubernetes.io/version: 0.25.0
    helm-revision: "1"
    helm.sh/chart: blocky-16.13.6
    release: blocky
  name: blocky
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: blocky-16.13.6
    app.kubernetes.io/instance: blocky
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: blocky
    app.kubernetes.io/version: 0.25.0
    helm-revision: "1"
    helm.sh/chart: blocky-16.13.6
    release: blocky
  name: blocky
rules:
- apiGroups:
  - ""
  resources:
  - services
  - namespaces
  verbs:
  - list
  - watch
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: blocky-16.13.6
    app.kubernetes.io/instance: blocky
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: blocky
    app.kubernetes.io/version: 0.25.0
    helm-revision: "1"
    helm.sh/chart: blocky-16.13.6
    release: blocky
  name: blocky
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: blocky
subjects:
- kind: ServiceAccount
  name: blocky
  namespace: default
---
apiVersion: v1
data:
  config.yml: "blocking:\n  blackLists:\n    default:\n    - https://big.oisd.nl/domainswild\n
    \   - https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts\n  blockTTL:
    6h\n  blockType: nxDomain\n  clientGroupsBlock:\n    default:\n    - default\n
    \ downloadAttempts: 3\n  downloadCooldown: 5s\n  downloadTimeout: 60s\n  processingConcurrency:
    8\n  refreshPeriod: 4h\n  startStrategy: fast\n  whiteLists:\n    default:\n    -
    https://raw.githubusercontent.com/anudeepND/whitelist/master/domains/optional-list.txt\n
    \   - https://raw.githubusercontent.com/anudeepND/whitelist/master/domains/whitelist.txt\n
    \   - https://raw.githubusercontent.com/rahilpathan/pihole-whitelist/main/1.LowWL.txt\ncaching:\n
    \ cacheTimeNegative: 30m\n  maxItemsCount: 0\n  maxTime: 0\n  minTime: 15m\n  prefetchExpires:
    12h\n  prefetchMaxItemsCount: 0\n  prefetchThreshold: 5\n  prefetching: true\nconditional:\n
    \ mapping:\n    streng-it.org: 127.0.0.1:5353\ncustomDNS:\n  customTTL: 1h\nlog:\n
    \ level: info\n  timestamp: true\nminTlsServeVersion: 1.2\nports:\n  dns: 53\n
    \ http: 4000\n  https: 4443\n  tls: 853\nprometheus:\n  enable: true\n  path:
    /metrics\nqueryLog:\n  creationAttempts: 3\n  creationCooldown: 3\n  logRetentionDays:
    0\n  target: \n  type: null\nredis:\n  address: blocky-redis:6379\n  connectionAttempts:
    10\n  connectionCooldown: 3s\n  database: 0\n  password: PLACEHOLDERPASSWORD\n
    \ required: true\nupstream:\n  default:\n  - 1.1.1.1\n  - 1.0.0.1\n  - 8.8.8.8\n
    \ - 8.8.4.4\n  - 9.9.9.9\n  - 149.112.112.112\n  - 208.67.222.222\n  - 208.67.220.220\n
    \ - 8.26.56.26\n  - 8.20.247.20\nupstreamTimeout: 1s"
kind: ConfigMap
metadata:
  labels:
    app: blocky-16.13.6
    app.kubernetes.io/instance: blocky
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: blocky
    app.kubernetes.io/version: 0.25.0
    helm-revision: "1"
    helm.sh/chart: blocky-16.13.6
    release: blocky
  name: blocky-config
  namespace: default
---
apiVersion: v1
data:
  Corefile: |-
    .:5353 {
        errors
        log
        health {
            lameduck 5s
        }
        ready
        k8s_gateway "streng-it.org" {
          apex blocky.default
          ttl 300
          resources Ingress
          fallthrough
        }

        prometheus 0.0.0.0:9153
        forward . 1.1.1.1
        loop
        reload
        loadbalance
    }
kind: ConfigMap
metadata:
  labels:
    app: blocky-16.13.6
    app.kubernetes.io/instance: blocky
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: blocky
    app.kubernetes.io/version: 0.25.0
    helm-revision: "1"
    helm.sh/chart: blocky-16.13.6
    release: blocky
  name: blocky-corefile
  namespace: default
---
apiVersion: v1
data:
  ping_liveness_local.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_master.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "failed to connect using password: $REDIS_PASSWORD response: $response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_readiness_master.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
kind: ConfigMap
metadata:
  labels:
    app: redis-15.6.5
    app.kubernetes.io/instance: blocky
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.2
    helm-revision: "1"
    helm.sh/chart: redis-15.6.5
    release: blocky
  name: blocky-redis-health
  namespace: default
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: blocky-16.13.6
    app.kubernetes.io/instance: blocky
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: blocky
    app.kubernetes.io/version: 0.25.0
    helm-revision: "1"
    helm.sh/chart: blocky-16.13.6
    release: blocky
  name: blocky-rediscreds
  namespace: default
stringData:
  plain: blocky-redis
  plainhost: blocky-redis
  plainhostpass: :PLACEHOLDERPASSWORD@blocky-redis
  plainporthost: blocky-redis:6379
  redis-password: PLACEHOLDERPASSWORD
  url: redis://:PLACEHOLDERPASSWORD@blocky-redis:6379/0
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: blocky-16.13.6
    app.kubernetes.io/instance: blocky
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: blocky
    app.kubernetes.io/version: 0.25.0
    helm-revision: "1"
    helm.sh/chart: blocky-16.13.6
    release: blocky
    service.name: main
  name: blocky
  namespace: default
spec:
  ports:
  - name: main
    port: 4000
    protocol: TCP
    targetPort: 4000
  publishNotReadyAddresses: false
  selector:
    app.kubernetes.io/instance: blocky
    app.kubernetes.io/name: blocky
    pod.name: main
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    metallb.io/allow-shared-ip: blocky
    metallb.io/loadBalancerIPs: 192.168.178.101
  labels:
    app: blocky-16.13.6
    app.kubernetes.io/instance: blocky
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: blocky
    app.kubernetes.io/version: 0.25.0
    helm-revision: "1"
    helm.sh/chart: blocky-16.13.6
    release: blocky
    service.name: dns
  name: blocky-dns
  namespace: default
spec:
  allocateLoadBalancerNodePorts: false
  ports:
  - name: dns
    port: 53
    protocol: UDP
    targetPort: 53
  - name: dnstcp
    port: 53
    protocol: TCP
    targetPort: 53
  publishNotReadyAddresses: false
  selector:
    app.kubernetes.io/instance: blocky
    app.kubernetes.io/name: blocky
    pod.name: main
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: blocky-16.13.6
    app.kubernetes.io/instance: blocky
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: blocky
    app.kubernetes.io/version: 0.25.0
    helm-revision: "1"
    helm.sh/chart: blocky-16.13.6
    release: blocky
    service.name: dot
  name: blocky-dot
  namespace: default
spec:
  ports:
  - name: dot
    port: 853
    protocol: TCP
    targetPort: 853
  publishNotReadyAddresses: false
  selector:
    app.kubernetes.io/instance: blocky
    app.kubernetes.io/name: blocky
    pod.name: main
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    traefik.ingress.kubernetes.io/service.serversscheme: https
  labels:
    app: blocky-16.13.6
    app.kubernetes.io/instance: blocky
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: blocky
    app.kubernetes.io/version: 0.25.0
    helm-revision: "1"
    helm.sh/chart: blocky-16.13.6
    release: blocky
    service.name: https
  name: blocky-https
  namespace: default
spec:
  ports:
  - name: https
    port: 4443
    protocol: TCP
    targetPort: 4443
  publishNotReadyAddresses: false
  selector:
    app.kubernetes.io/instance: blocky
    app.kubernetes.io/name: blocky
    pod.name: main
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: blocky-16.13.6
    app.kubernetes.io/instance: blocky
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: blocky
    app.kubernetes.io/version: 0.25.0
    helm-revision: "1"
    helm.sh/chart: blocky-16.13.6
    release: blocky
    service.name: k8sgateway
  name: blocky-k8sgateway
  namespace: default
spec:
  ports:
  - name: k8sgateway
    port: 5353
    protocol: UDP
    targetPort: 5353
  publishNotReadyAddresses: false
  selector:
    app.kubernetes.io/instance: blocky
    app.kubernetes.io/name: blocky
    pod.name: main
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: redis-15.6.5
    app.kubernetes.io/instance: blocky
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.2
    helm-revision: "1"
    helm.sh/chart: redis-15.6.5
    release: blocky
    service.name: main
  name: blocky-redis
  namespace: default
spec:
  ports:
  - name: main
    port: 6379
    protocol: TCP
    targetPort: 6379
  publishNotReadyAddresses: false
  selector:
    app.kubernetes.io/instance: blocky
    app.kubernetes.io/name: redis
    pod.name: main
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: blocky-16.13.6
    app.kubernetes.io/instance: blocky
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: blocky
    app.kubernetes.io/version: 0.25.0
    helm-revision: "1"
    helm.sh/chart: blocky-16.13.6
    release: blocky
  name: blocky
  namespace: default
spec:
  replicas: 2
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: blocky
      app.kubernetes.io/name: blocky
      pod.name: main
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/cnpg: 49e835797c10dc4dbc6a5f209a11215266ab203eb07702ffa384927bd72e2b24
        checksum/configmaps: bd2016ec86a99171633e6787c76cec985752861c33081637691bd1f31feee78d
        checksum/mariadb: 09c85576cb45b1eecd1467732b11ea8fa3363b0105c465f02a6ad64991521d52
        checksum/mongodb: 09c85576cb45b1eecd1467732b11ea8fa3363b0105c465f02a6ad64991521d52
        checksum/persistence: ac6de21c35a52a406fb8c2cca14d613345db43caea8b84c2935851b048f3e172
        checksum/redis: c768767aa400cd22f70e01a1cad485624d117b33d0f53a81ff38b86cb761b5b1
        checksum/secrets: 2f88bd6162bdd31a9e4756935a12994d1d1082809c46e25c66ae84a6eb4344a7
        checksum/services: ded79648e66ecca152cd8fd42d61679ea9ca2b79ebe4e24ceeb06ca1817ecfa2
        checksum/solr: 29c14feeaddbf7762052db593898d274941f539cee681ddc613957587686f347
      labels:
        app: blocky-16.13.6
        app.kubernetes.io/instance: blocky
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: blocky
        app.kubernetes.io/version: 0.25.0
        helm-revision: "1"
        helm.sh/chart: blocky-16.13.6
        pod.lifecycle: permanent
        pod.name: main
        release: blocky
    spec:
      automountServiceAccountToken: true
      containers:
      - args:
        - -conf
        - /etc/coredns/Corefile
        env:
        - name: TZ
          value: UTC
        - name: UMASK
          value: "0022"
        - name: UMASK_SET
          value: "0022"
        - name: NVIDIA_VISIBLE_DEVICES
          value: void
        - name: PUID
          value: "568"
        - name: USER_ID
          value: "568"
        - name: UID
          value: "568"
        - name: PGID
          value: "568"
        - name: GROUP_ID
          value: "568"
        - name: GID
          value: "568"
        - name: S6_READ_ONLY_ROOT
          value: "1"
        image: quay.io/oriedge/k8s_gateway:v0.4.0@sha256:7bdbd447c0244b8f89de9cd6f4826ed0ac66c9406fac3a4ac80081020c251c6b
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 12
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 5
        name: blocky-k8sgateway
        readinessProbe:
          failureThreshold: 4
          httpGet:
            path: /ready
            port: 8181
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 12
          successThreshold: 2
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 4000m
            memory: 8Gi
          requests:
            cpu: 10m
            memory: 50Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_BIND_SERVICE
            - CHOWN
            - SETUID
            - SETGID
            - FOWNER
            - DAC_OVERRIDE
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 0
          runAsNonRoot: false
          runAsUser: 0
          seccompProfile:
            type: RuntimeDefault
        startupProbe:
          failureThreshold: 60
          httpGet:
            path: /ready
            port: 8181
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 3
        stdin: false
        tty: false
        volumeMounts:
        - mountPath: /etc/coredns
          name: config-volume
          readOnly: true
        - mountPath: /dev/shm
          name: devshm
          readOnly: false
        - mountPath: /shared
          name: shared
          readOnly: false
        - mountPath: /tmp
          name: tmp
          readOnly: false
        - mountPath: /var/logs
          name: varlogs
          readOnly: false
        - mountPath: /var/run
          name: varrun
          readOnly: false
      - env:
        - name: TZ
          value: UTC
        - name: UMASK
          value: "0022"
        - name: UMASK_SET
          value: "0022"
        - name: NVIDIA_VISIBLE_DEVICES
          value: void
        - name: S6_READ_ONLY_ROOT
          value: "1"
        image: docker.io/spx01/blocky:v0.25@sha256:347f8c6addc1775ef74b83dfc609c28436a67f812ef0ee7e2602569dc0e56cd1
        imagePullPolicy: IfNotPresent
        name: blocky
        ports:
        - containerPort: 53
          hostPort: null
          name: dns
          protocol: UDP
        - containerPort: 53
          hostPort: null
          name: dnstcp
          protocol: TCP
        - containerPort: 853
          hostPort: null
          name: dot
          protocol: TCP
        - containerPort: 4443
          hostPort: null
          name: https
          protocol: TCP
        - containerPort: 5353
          hostPort: null
          name: k8sgateway
          protocol: UDP
        - containerPort: 4000
          hostPort: null
          name: main
          protocol: TCP
        resources:
          limits:
            cpu: 4000m
            memory: 8Gi
          requests:
            cpu: 10m
            memory: 50Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 568
          runAsNonRoot: true
          runAsUser: 568
          seccompProfile:
            type: RuntimeDefault
        stdin: false
        tty: false
        volumeMounts:
        - mountPath: /dev/shm
          name: devshm
          readOnly: false
        - mountPath: /shared
          name: shared
          readOnly: false
        - mountPath: /app/config.yml
          name: tc-config
          readOnly: true
          subPath: config.yml
        - mountPath: /tmp
          name: tmp
          readOnly: false
        - mountPath: /var/logs
          name: varlogs
          readOnly: false
        - mountPath: /var/run
          name: varrun
          readOnly: false
      dnsConfig:
        options:
        - name: ndots
          value: "1"
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      hostIPC: false
      hostNetwork: false
      hostPID: false
      hostUsers: true
      initContainers:
      - command:
        - /bin/sh
        - -c
        - |-
          /bin/bash <<'EOF'
          echo "Executing DB waits..."
          [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD";
          export LIVE=false;
          until "$LIVE";
          do
            response=$(
                timeout -s 3 2 \
                redis-cli \
                  -h "$REDIS_HOST" \
                  -p "$REDIS_PORT" \
                  ping
              )
            if [ "$response" == "PONG" ] || [ "$response" == "LOADING Redis is loading the dataset in memory" ]; then
              LIVE=true
              echo "$response"
              echo "Redis Responded, ending initcontainer and starting main container(s)..."
            else
              echo "$response"
              echo "Redis not responding... Sleeping for 10 sec..."
              sleep 10
            fi;
          done
          EOF
        env:
        - name: TZ
          value: UTC
        - name: UMASK
          value: "0022"
        - name: UMASK_SET
          value: "0022"
        - name: NVIDIA_VISIBLE_DEVICES
          value: void
        - name: S6_READ_ONLY_ROOT
          value: "1"
        - name: REDIS_HOST
          valueFrom:
            secretKeyRef:
              key: plainhost
              name: blocky-rediscreds
        - name: REDIS_PASSWORD
          value: PLACEHOLDERPASSWORD
        - name: REDIS_PORT
          value: "6379"
        image: tccr.io/tccr/db-wait-redis:v1.1.0@sha256:11cbaee0ce92bc243071f31f4fb8bc30c2735ee34ead52cd842713c77bdf8739
        imagePullPolicy: IfNotPresent
        name: blocky-system-redis-wait
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 10m
            memory: 50Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 568
          runAsNonRoot: true
          runAsUser: 568
          seccompProfile:
            type: RuntimeDefault
        stdin: false
        tty: false
        volumeMounts:
        - mountPath: /dev/shm
          name: devshm
          readOnly: false
        - mountPath: /shared
          name: shared
          readOnly: false
        - mountPath: /tmp
          name: tmp
          readOnly: false
        - mountPath: /var/logs
          name: varlogs
          readOnly: false
        - mountPath: /var/run
          name: varrun
          readOnly: false
      nodeSelector:
        kubernetes.io/arch: amd64
      restartPolicy: Always
      runtimeClassName: null
      securityContext:
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups:
        - 568
        sysctls:
        - name: net.ipv4.ip_unprivileged_port_start
          value: "53"
      serviceAccountName: blocky
      shareProcessNamespace: false
      terminationGracePeriodSeconds: 60
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/instance: blocky
            app.kubernetes.io/name: blocky
            pod.name: main
        maxSkew: 1
        nodeAffinityPolicy: Honor
        nodeTaintsPolicy: Honor
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
      volumes:
      - configMap:
          items:
          - key: Corefile
            path: Corefile
          name: blocky-corefile
          optional: false
        name: config-volume
      - emptyDir:
          medium: Memory
          sizeLimit: 8Gi
        name: devshm
      - emptyDir: {}
        name: shared
      - configMap:
          name: blocky-config
          optional: false
        name: tc-config
      - emptyDir:
          medium: Memory
          sizeLimit: 8Gi
        name: tmp
      - emptyDir:
          medium: Memory
          sizeLimit: 8Gi
        name: varlogs
      - emptyDir:
          medium: Memory
          sizeLimit: 8Gi
        name: varrun
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: redis-15.6.5
    app.kubernetes.io/instance: blocky
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.2
    helm-revision: "1"
    helm.sh/chart: redis-15.6.5
    release: blocky
  name: blocky-redis
  namespace: default
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: blocky
      app.kubernetes.io/name: redis
      pod.name: main
  serviceName: blocky-redis
  template:
    metadata:
      annotations:
        checksum/cnpg: 2291fc448ae81adfd860632d73e38ffc039fc25959ede77cf692f754199383ee
        checksum/configmaps: e4ff2990e1b108efb5fc391e633d1bb258a621411ef64149c58626f3a7451ff6
        checksum/mariadb: 09c85576cb45b1eecd1467732b11ea8fa3363b0105c465f02a6ad64991521d52
        checksum/mongodb: 09c85576cb45b1eecd1467732b11ea8fa3363b0105c465f02a6ad64991521d52
        checksum/persistence: 596e0b956bd4bdfb4d70ff2e7dde67dc31cb5475cc00cf96d97522d423c74376
        checksum/redis: 013343a028cbb3f7e08f4ba7522702dd98e52632c688641074b0b1db3df29894
        checksum/secrets: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/services: 1fbe77c7cddc2e9997579990c10c46e0224ee9bc92911122de33093d0550ad9f
        checksum/solr: 29c14feeaddbf7762052db593898d274941f539cee681ddc613957587686f347
      labels:
        app: redis-15.6.5
        app.kubernetes.io/instance: blocky
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.4.2
        helm-revision: "1"
        helm.sh/chart: redis-15.6.5
        pod.lifecycle: permanent
        pod.name: main
        release: blocky
    spec:
      automountServiceAccountToken: false
      containers:
      - env:
        - name: TZ
          value: UTC
        - name: UMASK
          value: "0022"
        - name: UMASK_SET
          value: "0022"
        - name: NVIDIA_VISIBLE_DEVICES
          value: void
        - name: PUID
          value: "568"
        - name: USER_ID
          value: "568"
        - name: UID
          value: "568"
        - name: PGID
          value: "568"
        - name: GROUP_ID
          value: "568"
        - name: GID
          value: "568"
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        - name: REDIS_PASSWORD
          value: PLACEHOLDERPASSWORD
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_REPLICATION_MODE
          value: master
        image: public.ecr.aws/bitnami/redis:7.4.2@sha256:66b3b67e07a6537145e14d483d0e93c79793ea7ee4fdbf41b35e1080acc5f4c4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_liveness_local.sh 2
          failureThreshold: 5
          initialDelaySeconds: 12
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 5
        name: blocky-redis
        ports:
        - containerPort: 6379
          hostPort: null
          name: main
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_readiness_local.sh 2
          failureThreshold: 4
          initialDelaySeconds: 10
          periodSeconds: 12
          successThreshold: 2
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 4000m
            memory: 8Gi
          requests:
            cpu: 10m
            memory: 50Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add: []
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: false
          runAsGroup: 0
          runAsNonRoot: false
          runAsUser: 568
          seccompProfile:
            type: RuntimeDefault
        startupProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_readiness_local.sh 2
          failureThreshold: 60
          initialDelaySeconds: 10
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 3
        stdin: false
        tty: false
        volumeMounts:
        - mountPath: /dev/shm
          name: devshm
          readOnly: false
        - mountPath: /health
          name: redis-health
          readOnly: false
        - mountPath: /shared
          name: shared
          readOnly: false
        - mountPath: /tmp
          name: tmp
          readOnly: false
        - mountPath: /var/logs
          name: varlogs
          readOnly: false
        - mountPath: /var/run
          name: varrun
          readOnly: false
      dnsConfig:
        options:
        - name: ndots
          value: "1"
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      hostIPC: false
      hostNetwork: false
      hostPID: false
      hostUsers: true
      nodeSelector:
        kubernetes.io/arch: amd64
      restartPolicy: Always
      runtimeClassName: null
      securityContext:
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups:
        - 568
        sysctls: []
      serviceAccountName: default
      shareProcessNamespace: false
      terminationGracePeriodSeconds: 60
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/instance: blocky
            app.kubernetes.io/name: redis
            pod.name: main
        maxSkew: 1
        nodeAffinityPolicy: Honor
        nodeTaintsPolicy: Honor
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
      volumes:
      - emptyDir:
          medium: Memory
          sizeLimit: 8Gi
        name: devshm
      - configMap:
          defaultMode: 493
          items:
          - key: ping_readiness_local.sh
            path: ping_readiness_local.sh
          - key: ping_liveness_local.sh
            path: ping_liveness_local.sh
          - key: ping_readiness_master.sh
            path: ping_readiness_master.sh
          - key: ping_liveness_master.sh
            path: ping_liveness_master.sh
          - key: ping_liveness_local_and_master.sh
            path: ping_liveness_local_and_master.sh
          - key: ping_readiness_local_and_master.sh
            path: ping_readiness_local_and_master.sh
          name: blocky-redis-health
          optional: false
        name: redis-health
      - emptyDir: {}
        name: shared
      - emptyDir:
          medium: Memory
          sizeLimit: 8Gi
        name: tmp
      - emptyDir:
          medium: Memory
          sizeLimit: 8Gi
        name: varlogs
      - emptyDir:
          medium: Memory
          sizeLimit: 8Gi
        name: varrun
  updateStrategy:
    type: RollingUpdate
